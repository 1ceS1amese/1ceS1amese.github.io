<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Newstarctf2024</title>
      <link href="/2025/07/10/NewStarctf2024/"/>
      <url>/2025/07/10/NewStarctf2024/</url>
      
        <content type="html"><![CDATA[<h1 id="before_sunset">Before_Sunset</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b'flag{XXXXXXXXX}'</span></span><br><span class="line">note = <span class="string">b'Before_Sunset*xt'</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key = <span class="built_in">bytes</span>(choices(note,k=<span class="number">3</span>))</span><br><span class="line">    keys.append(sha256(key).digest())</span><br><span class="line">cipher = <span class="string">b'happy_newyear!!!'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    cipher = AES.new(keys[i], AES.MODE_ECB).encrypt(cipher) </span><br><span class="line">enkey = sha256(<span class="string">b""</span>.join(keys)).digest()</span><br><span class="line">enflag = AES.new(enkey,AES.MODE_ECB).encrypt(pad(flag,AES.block_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'cipher = <span class="subst">{cipher}</span>'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'enflag = <span class="subst">{enflag}</span>'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">cipher = b'4\xf6\x89\x81:\xd7\xf4\xc4\xad\xb1)\x99\xb1l\xe2\x7f'</span></span><br><span class="line"><span class="string">enflag = b'\x964\xdcq\xcc\xe9\xde\xfe=\xfb\x08\\\x9e\xe3\xf5\xef^\x9c\x11\xaa\xb8\x97\xe61\x1ee\xe4dV\x0c\x1c\xf7 \xabX]\x92\xd6\xa3\xdegD\xbb\xbd\x98\x90\xeb~'</span></span><br><span class="line"><span class="string">"""</span>aaaaa</span><br></pre></td></tr></table></figure><p>用 <code>note</code> 生成了 4 个密钥（每个是从 <code>note</code>中随机选 3 字节，再 SHA256 得到 32 字节 AES 密钥）</p><p>用这些密钥对一个固定明文 <code>P = b"happy_newyear!!!"</code>连续加密 4 次，得到 <code>cipher = C4</code>；</p><p>把这 4 个密钥拼起来 SHA256 出 <code>enkey</code>，用它对 flag 做AES-ECB 加密（带 PKCS#7 padding），得到 <code>enflag</code>。</p><p>采用的是相遇攻击的思想</p><p>所有 <code>(K0, K1)</code> 组合下的结果 <code>c2</code> 存进字典<code>map_fw</code>，键是加密结果，值是 K0 和 K1 的索引。</p><p>构建完后，<code>map_fw</code> 是一个【中间密文 →密钥对】的快速查找表。</p><p>对每个 <code>(K3, K2)</code> 组合，从最终密文 <code>C4</code>开始反向解密：</p><p>判断 <code>c2</code> 是否在前向字典里 ——如果找到了，说明这两个密钥和前面对应的 <code>(K0,K1)</code>正好组成了一组正确密钥</p><p>简单来说就是一边通过前半段的寻找建字典然后一边查</p><h2 id="exp">EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> hashlib   <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher       <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">P   = <span class="string">b"happy_newyear!!!"</span></span><br><span class="line">C4  = <span class="string">b"4\xf6\x89\x81:\xd7\xf4\xc4\xad\xb1)\x99\xb1l\xe2\x7f"</span></span><br><span class="line">enflag = <span class="string">b'\x964\xdcq\xcc\xe9\xde\xfe=\xfb\x08\\\x9e\xe3\xf5\xef^\x9c\x11\xaa\xb8\x97\xe61\x1ee\xe4dV\x0c\x1c\xf7 \xabX]\x92\xd6\xa3\xdegD\xbb\xbd\x98\x90\xeb~'</span></span><br><span class="line">note = <span class="string">b"Before_Sunset*xt"</span></span><br><span class="line"></span><br><span class="line">key3_list = [<span class="built_in">bytes</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> product(note, repeat=<span class="number">3</span>)]</span><br><span class="line">aes_keys  = [sha256(k3).digest() <span class="keyword">for</span> k3 <span class="keyword">in</span> key3_list]</span><br><span class="line"></span><br><span class="line">map_fw = {}</span><br><span class="line"><span class="keyword">for</span> i, K0 <span class="keyword">in</span> <span class="built_in">enumerate</span>(aes_keys):</span><br><span class="line">    c1 = AES.new(K0, AES.MODE_ECB).encrypt(P)</span><br><span class="line">    <span class="keyword">for</span> j, K1 <span class="keyword">in</span> <span class="built_in">enumerate</span>(aes_keys):</span><br><span class="line">        c2 = AES.new(K1, AES.MODE_ECB).encrypt(c1)</span><br><span class="line">        map_fw[c2] = (i, j)   </span><br><span class="line"></span><br><span class="line">found = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> l, K3 <span class="keyword">in</span> <span class="built_in">enumerate</span>(aes_keys):</span><br><span class="line">    c3 = AES.new(K3, AES.MODE_ECB).decrypt(C4)</span><br><span class="line">    <span class="keyword">for</span> k, K2 <span class="keyword">in</span> <span class="built_in">enumerate</span>(aes_keys):</span><br><span class="line">        c2_prime = AES.new(K2, AES.MODE_ECB).decrypt(c3)</span><br><span class="line">        <span class="keyword">if</span> c2_prime <span class="keyword">in</span> map_fw:</span><br><span class="line">            i, j = map_fw[c2_prime]</span><br><span class="line">            K0, K1 = aes_keys[i], aes_keys[j]</span><br><span class="line">            found = (K0, K1, K2, K3)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"没找到密钥组合！"</span>)</span><br><span class="line"></span><br><span class="line">K0, K1, K2, K3 = found</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"找到四个 AES 密钥！"</span>)</span><br><span class="line">enkey = sha256(K0 + K1 + K2 + K3).digest()</span><br><span class="line">plain = unpad(AES.new(enkey, AES.MODE_ECB).decrypt(enflag), AES.block_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Flag ="</span>, plain)</span><br><span class="line"><span class="comment">#flag{W&amp;_W1II-3Nc0unter_n3*T=y@aR}</span></span><br></pre></td></tr></table></figure><h1 id="see-you-again">See you again</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span>*</span><br><span class="line">flag = <span class="string">b'flag{XXXXXXXXXXXXX}'</span></span><br><span class="line">ext_len = <span class="number">4</span>*<span class="number">23</span> - <span class="built_in">len</span>(flag)</span><br><span class="line">flag += <span class="string">''</span>.join(choice(string.printable) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(ext_len))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_rsa_encrypt</span>():</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        data.append(bytes_to_long(flag[<span class="number">23</span>*i:<span class="number">23</span>*(i+<span class="number">1</span>)].encode()))</span><br><span class="line"></span><br><span class="line">    M = Matrix(Zmod(n), [data[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    C = M**e</span><br><span class="line"></span><br><span class="line">    x1=randint(<span class="number">0</span>,<span class="number">2</span>**<span class="number">11</span>)</span><br><span class="line">    y1=randint(<span class="number">0</span>,<span class="number">2</span>**<span class="number">114</span>)</span><br><span class="line">    x2=randint(<span class="number">0</span>,<span class="number">2</span>**<span class="number">11</span>)</span><br><span class="line">    y2=randint(<span class="number">0</span>,<span class="number">2</span>**<span class="number">514</span>)</span><br><span class="line">    hint1=x1*p+y1*q</span><br><span class="line">    hint2=x2*p+y2*q</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hint1 ="</span>, hint1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hint2 ="</span>, hint2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"n ="</span>, n)</span><br><span class="line">    <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line">C = my_rsa_encrypt()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"C ="</span>, C)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">hint1 = 168265279404811256277233395102642358475458409482403711393035752197600859883963939768385846094966123277287664746626323932557461116229847433749541823928128333856483359321776317487696165625065</span></span><br><span class="line"><span class="string">hint2 = 388525731960756845976560311958832822501361876609762739131361346349184345486942393347353228412856257245501810230005909157804781984160852691049705221909148849268628655156230494562410040271685185427100514456092002902461455124227295965928975113228265630904429459035860216889967825964526267040037892094324439719411</span></span><br><span class="line"><span class="string">n = 73072541902206871020737492238712393160727227031674788366854370087046494314953414149210811810993251599137993812618059430654795580640655927531189983107761278404614174799313759634478308102715209502959314132742690028687179640727016334879648957747421327650216141691465903844138851357328611067635106605344718049129</span></span><br><span class="line"><span class="string">C = [ 6310748775703051581154234569431184868982413857734351142080359008436987630184616677942361392389551047027017330071293367514311142151815936199483256586417636348041649876709276752266778499479183523443148337562720814581572407854278542331966812940447535783779656684256297221348716866635101085755860498353339242115  5144330870923367619389647825281339367482009106753859407075628907488466365472218688907933875894666639770145465222088465870419295906638236631404037390832689261596431619354248820909813429665843949224111735121883894006720533494334946354541598413794931072951879543749090953489715640123785787585906571296066228337]</span></span><br><span class="line"><span class="string">[33291873086307192132352453738238356328226272776193653137970607851693478963529798496768193693023879049338380362901921264407689229849253505523956752578525472920304538365514116510285387059498125392190213470841105539220357787132908727038425638513550855537375794144340611979256932750425138088529265202217417349326  8710391985351492354130113806218295166875250333985231739921757023007679201614662002300751925094702862907693146762459566351810351082709246293390023137646644466382528873636039529534916744087376534336847024714465012051303713158199842172134865427319373041223732135032837752292040371239661190751800891412327395907]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>审计代码，该题中将flag分成了四给块，以此构成了一个2*2类型的密文矩阵，其他采取的是常规RSA加密的形式，</p><p>并且泄露了hint1和hint2 <span class="math display"><em>h</em><em>i</em><em>n</em><em>t</em>1 = <em>x</em>1 * <em>p</em> + <em>y</em>1 * <em>q</em></span></p><p><span class="math display"><em>h</em><em>i</em><em>n</em><em>t</em>2 = <em>x</em>2 * <em>p</em> + <em>y</em>2 * <em>q</em></span></p><p>其中的x1和x2为（0-2048）随机数</p><p>y1和y2为2^114位数</p><p>我们需要利用数学关系约分得到p和q</p><p>为了约分hin1和hin2</p><p>我们需要建立式子 <span class="math display"><em>x</em>1 * <em>h</em><em>i</em><em>n</em><em>t</em>2 − <em>x</em>2 * <em>h</em><em>i</em><em>n</em><em>t</em>1</span></p><p><span class="math display"> = <em>x</em>1 * (<em>x</em>2 * <em>p</em> + <em>y</em>2 * <em>q</em>) − <em>x</em>2 * (<em>x</em>1 * <em>p</em> + <em>y</em>1 * <em>q</em>)</span></p><p><span class="math display"> = <em>x</em>1 * <em>x</em>2 * <em>p</em> + <em>x</em>1 * <em>y</em>2 * <em>q</em> − <em>x</em>2 * <em>x</em>1 * <em>p</em> − <em>x</em>2 * <em>y</em>1 * <em>q</em></span></p><p><span class="math display"> = <em>x</em>1 * <em>y</em>2 * <em>q</em> − <em>x</em>2 * <em>y</em>1 * <em>q</em></span></p><p><span class="math display"> = <em>q</em> * (<em>x</em>1 * <em>y</em>2 − <em>x</em>2 * <em>y</em>1)</span></p><p>然后将这个式子与n求最大公约数即可分解n</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcd(x1 * hint2 - x2 * hint1, n) = gcd(q * something, p * q) = q</span><br></pre></td></tr></table></figure><h2 id="exp-1">exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">hint1 = <span class="number">168265279404811256277233395102642358475458409482403711393035752197600859883963939768385846094966123277287664746626323932557461116229847433749541823928128333856483359321776317487696165625065</span></span><br><span class="line">hint2 = <span class="number">388525731960756845976560311958832822501361876609762739131361346349184345486942393347353228412856257245501810230005909157804781984160852691049705221909148849268628655156230494562410040271685185427100514456092002902461455124227295965928975113228265630904429459035860216889967825964526267040037892094324439719411</span></span><br><span class="line">n = <span class="number">73072541902206871020737492238712393160727227031674788366854370087046494314953414149210811810993251599137993812618059430654795580640655927531189983107761278404614174799313759634478308102715209502959314132742690028687179640727016334879648957747421327650216141691465903844138851357328611067635106605344718049129</span></span><br><span class="line"></span><br><span class="line">hint1_mod_n = hint1 % n<span class="comment">#取模减少运算量</span></span><br><span class="line">hint2_mod_n = hint2 % n</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破寻找x1和x2的线性关系</span></span><br><span class="line"><span class="keyword">for</span> x1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2049</span>):</span><br><span class="line">    <span class="keyword">for</span> x2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2049</span>):</span><br><span class="line">        <span class="keyword">if</span> x1 == <span class="number">0</span> <span class="keyword">and</span> x2 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">#再次取个模降低运算量</span></span><br><span class="line">        term1 = (x1 * hint2_mod_n) % n</span><br><span class="line">        term2 = (x2 * hint1_mod_n) % n</span><br><span class="line">        candidate_mod_n = (term1 - term2) % n</span><br><span class="line">        current_gcd = math.gcd(candidate_mod_n, n)</span><br><span class="line">        <span class="keyword">if</span> current_gcd &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"Found factors with x1=<span class="subst">{x1}</span>, x2=<span class="subst">{x2}</span>"</span>)</span><br><span class="line">            p = current_gcd</span><br><span class="line">            q = n // current_gcd</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"p ="</span>, p)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"q ="</span>, q)</span><br><span class="line">            exit()</span><br><span class="line"><span class="comment">#x1=1106, x2=437</span></span><br><span class="line"><span class="comment">#p = 9840199651059680279315545552078195603933414815185149988850805053207130958990873093781755127037056517374437691746406285746154497813695817556539648065445111</span></span><br><span class="line"><span class="comment">#q = 7425920661511961227328493926307082700428726975369330043535693658853751767178547931292974567810134212365247300045094600690928968177216378782623096259591839</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sage</span></span><br><span class="line">p = <span class="number">9840199651059680279315545552078195603933414815185149988850805053207130958990873093781755127037056517374437691746406285746154497813695817556539648065445111</span></span><br><span class="line">q = <span class="number">7425920661511961227328493926307082700428726975369330043535693658853751767178547931292974567810134212365247300045094600690928968177216378782623096259591839</span></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密矩阵C的元素</span></span><br><span class="line">c11 = <span class="number">6310748775703051581154234569431184868982413857734351142080359008436987630184616677942361392389551047027017330071293367514311142151815936199483256586417636348041649876709276752266778499479183523443148337562720814581572407854278542331966812940447535783779656684256297221348716866635101085755860498353339242115</span></span><br><span class="line">c12 = <span class="number">5144330870923367619389647825281339367482009106753859407075628907488466365472218688907933875894666639770145465222088465870419295906638236631404037390832689261596431619354248820909813429665843949224111735121883894006720533494334946354541598413794931072951879543749090953489715640123785787585906571296066228337</span></span><br><span class="line">c21 = <span class="number">33291873086307192132352453738238356328226272776193653137970607851693478963529798496768193693023879049338380362901921264407689229849253505523956752578525472920304538365514116510285387059498125392190213470841105539220357787132908727038425638513550855537375794144340611979256932750425138088529265202217417349326</span></span><br><span class="line">c22 = <span class="number">8710391985351492354130113806218295166875250333985231739921757023007679201614662002300751925094702862907693146762459566351810351082709246293390023137646644466382528873636039529534916744087376534336847024714465012051303713158199842172134865427319373041223732135032837752292040371239661190751800891412327395907</span></span><br><span class="line"></span><br><span class="line">R = Zmod(n)</span><br><span class="line">C = Matrix(R, [[c11, c12], [c21, c22]])</span><br><span class="line">M = C ** d</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> M:</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> row:</span><br><span class="line">        data.append(long_to_bytes(<span class="built_in">int</span>(element)))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b''</span>.join(data)</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br><span class="line"><span class="comment">#flag{Yu0&amp;63t_it*butxt^n0T*6@t*her}</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2025/06/28/test/"/>
      <url>/2025/06/28/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/06/28/hello-world/"/>
      <url>/2025/06/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
